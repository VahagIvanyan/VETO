#
# Macro file for the initialization phase of "TestEm6.cc"
#
# Sets some default verbose
# and initializes the graphic.
#
/control/verbose 2
/run/verbose 2
#
/run/initialize
#
# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:

/vis/viewer/set/viewpointThetaPhi 90. 45. degree

#
# Specify zoom value:
/vis/viewer/zoom 5
#
# Specify style (surface or wireframe):
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge false
/vis/geometry/set/visibility PlasticsUp 0 true
/vis/geometry/set/colour PlasticsUp 0 1 0 0
/vis/viewer/set/lineSegmentsPerCircle 100
#
# Draw coordinate axes:
/vis/scene/add/axes 0 0 0 1 m
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts false
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 1
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set e- red
/vis/modeling/trajectories/drawByParticleID-0/set mu+ white
/vis/modeling/trajectories/drawByParticleID-0/set mu- black
/vis/modeling/trajectories/drawByParticleID-0/set gamma green
/vis/modeling/trajectories/drawByParticleID-0/set neutron yellow
/vis/modeling/trajectories/drawByParticleID-0/set alpha blue
/vis/modeling/trajectories/drawByParticleID-0/set GenericIon blue
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate

/vis/set/textColour green
#/vis/set/textLayout right
#/vis/scene/add/text 125 0 0 cm 24 4 4 Veto
#/vis/set/textLayout right
#/vis/scene/add/text -80 0 -80 cm 24 4 4 JPET
# or, if your system does not support right-adjustment
#/vis/scene/add/text2D 0 -.9 24 ! ! Veto and JPET
/vis/set/textLayout    # Revert to normal (left adjusted) layout
/vis/set/textColour # Revert to default text colour (blue)
#
# Re-establish auto refreshing and verbosity:
#/vis/geometry/set/visibility World 0 false
/vis/geometry/set/visibility VetoLV 0 false
#/vis/geometry/set/visibility Ring 0 false
/vis/geometry/set/visibility PlasticsUp 0 true
#/vis/viewer/set/style surface
/vis/viewer/set/hiddenMarker true

/vis/viewer/set/background 0.77 0.85 0.55
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush

